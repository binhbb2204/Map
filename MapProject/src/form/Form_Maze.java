
package form;

import java.awt.*;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;

import javax.swing.*;

import matrix.AStarCostEvaluator;
import matrix.DijkstraCostEvaluator;
import model.ICostEvaluator;
import model.XAStarPathAlgorithm;
import model.XMatrix;
import model.XNode;
import swing.PanelBorder;
import swing.PanelOval;
import view.AppConstant;
import view.Canvas;
import view.ControlPanel;
import view.Coordinator;
import view.Parameters;

public class Form_Maze extends javax.swing.JPanel {

    public Form_Maze() {
        initComponents();
        demo();
        
    }
    static class CanvasPanel extends JPanel {

		JLabel statusLabel = new JLabel(" ", JLabel.CENTER);
		
		public void setStatus(String text) {
			if (text != null && text.length() > 0 ) {
				statusLabel.setText(text);
			}
			else {
				statusLabel.setText(" ");
			}
		}
		
		public CanvasPanel(String name, Canvas canvas) {
			this.setLayout(new BorderLayout());
			JLabel titleLabel = new JLabel(name, JLabel.CENTER);
            titleLabel.setFont(new Font("SansSerif", Font.BOLD, 12));
            titleLabel.setForeground(new Color(120, 120, 120));
			add(BorderLayout.NORTH, titleLabel);
			add(BorderLayout.CENTER, canvas);
			add(BorderLayout.SOUTH, statusLabel);

            setBackground(Color.WHITE);
		}

	}

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1054, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 646, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    

    private void demo() {
        final Parameters parameters = new Parameters();
        final ControlPanel controlPanel = new ControlPanel(parameters);
        final Coordinator coordinator = new Coordinator();
        coordinator.setControlPanel(controlPanel);
    
        final AStarCostEvaluator evaluator1 = new AStarCostEvaluator();
        final XAStarPathAlgorithm pathAlgorithm1 = new XAStarPathAlgorithm();
        pathAlgorithm1.setEvaluator(evaluator1);
        final Canvas canvas1 = createCanvas(parameters, evaluator1);
        final CanvasPanel canvasPanel1 = new CanvasPanel("A*", canvas1);
    
        final DijkstraCostEvaluator evaluator2 = new DijkstraCostEvaluator();
        final XAStarPathAlgorithm pathAlgorithm2 = new XAStarPathAlgorithm();
        pathAlgorithm2.setEvaluator(evaluator2);
        final Canvas canvas2 = createCanvas(parameters, evaluator2);
        final CanvasPanel canvasPanel2 = new CanvasPanel("Dijkstra", canvas2);
    
        coordinator.add(canvas1, pathAlgorithm1, evaluator1);
        coordinator.add(canvas2, pathAlgorithm2, evaluator2);
    
        PropertyChangeListener propertyListener = new PropertyChangeListener() {
            @Override
            public void propertyChange(PropertyChangeEvent evt) {
                Object source = evt.getSource();
                String propertyName = evt.getPropertyName();
                if (propertyName.equals(AppConstant.SearchStarted)) {
                    SwingUtilities.invokeLater(() -> {
                        if (source == canvas1) {
                            canvasPanel1.setStatus("Searching...");
                        } else if (source == canvas2) {
                            canvasPanel2.setStatus("Searching...");
                        }
                    });
                } else if (propertyName.equals(AppConstant.SearchCompleted)) {
                    SwingUtilities.invokeLater(() -> {
                        if (source == canvas1) {
                            canvasPanel1.setStatus(format(canvas1.getMatrix()));
                        } else if (source == canvas2) {
                            canvasPanel2.setStatus(format(canvas2.getMatrix()));
                        }
                    });
                }
            }
    
            String format(XMatrix matrix) {
                StringBuilder sb = new StringBuilder();
                sb.append("cost: ");
                sb.append(matrix.getEnd().getCost());
                sb.append(", visited: ");
                sb.append(countVisitedNodes(matrix));
                return sb.toString();
            }
    
            int countVisitedNodes(XMatrix matrix) {
                int count = 0;
                for (int row = 0; row < matrix.getRow(); row++) {
                    for (int col = 0; col < matrix.getColumn(); col++) {
                        XNode node = matrix.getValue(row, col);
                        if (node.isVisited()) {
                            count++;
                        }
                    }
                }
                return count;
            }
        };
    
        coordinator.addPropertyChangeListener(canvas1, propertyListener);
        coordinator.addPropertyChangeListener(canvas2, propertyListener);
    
        setLayout(new BorderLayout());
        add(controlPanel, BorderLayout.WEST);
        JPanel mainPanel = new JPanel(new GridLayout(1, 0, 10, 10));
        mainPanel.add(canvasPanel1);
        mainPanel.add(canvasPanel2);
        add(mainPanel, BorderLayout.CENTER);
    }
    

    private Canvas createCanvas(final Parameters parameters, final ICostEvaluator evaluator) {
        final XMatrix matrix = new XMatrix();
        matrix.setEvaluator(evaluator);
        final Canvas canvas = new Canvas();
        canvas.setParameters(parameters);
        canvas.setMatrix(matrix);
        matrix.setNodeListener(new PropertyChangeListener() {
            @Override
            public void propertyChange(PropertyChangeEvent evt) {
                if (parameters.getAnimationMs() == 0) {
                    return;
                }
                try {
                    canvas.repaint();
                    Thread.sleep(parameters.getAnimationMs());
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
            }
        });
        return canvas;
    }
    

    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
